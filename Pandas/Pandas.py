########### PANDAS ##################

# Automatically generated by Colaboratory.

# Original file is located at
     #https://colab.research.google.com/drive/1yBwBeWkdwI358lpZj3_oiFd0m5P5v1y_
 

# * Pandas : Panel Data. Temelinde ekonometrik, finansal ve zaman serisi çalışmaları için doğmuştur. Panel veri kesit veri ve zaman serisi verisinin bir arada olduğu veri tipidir. Zaman indexini daha fazla önemseyen bir yaklaşımdır.

# * Numpy alternatifi değildir; numpy özelliklerini kullanan ve bunları genişleten bir kütüphanedir.

# * Numpy'dan farklı olarak yapısal veri setleri ile çalışmamızı sağlar; aynı zamanda Numpy'daki fix type zorunluluğu yoktur.

# * En genel anlamda; veri analizi ve manipülasyonu için yazılmış açık kaynak kodlu bir kütüphanesidir.

# * Temeli 2008 yılında atılmıştır.

# * R dataframe yapısını Phyton dünyasına taşımıştır ve dataframeler üzerinde hızlı ve etkin çalışma opsiyonu sağlamıştır.

########### Pandas Serisi Oluşturma ###########
 

import pandas as pd
seri = pd.Series([1,2,3,4,5])

type(seri)

seri.axes

seri.dtype

seri.size

seri.ndim

# İçindeki değerlere erişmek istersek;
seri.values

#Datanın ilk 3 gözlemine erişelim:
seri.head(3)

#son 3 gözleme bakalım:
seri.tail(3)

#index isimlendirme
import pandas as pd
seri = pd.Series([99,22,332,94,5],index=["a","b","c","d","e"])
seri

# Slicing işlemlerini index ile yapabiliriz:

seri["a"]

seri[["a","c"]]

seri["a":"d"]

########### Sözlük Üzerinden Seri Oluşturmak ###########
sozluk = {"REG":10,
          "LOJ":11,
          "CART":12
         }
sozluk

seri2 = pd.Series(sozluk)
seri2
seri2[["REG","CART"]]

#iki seriyi birleştirmek:

pd.concat([seri,seri],axis =0)
seri_all = pd.concat([seri,seri],axis =1)
seri_all.columns=["Bilesen1","Bilesen2"]
seri_all

########### Eleman İşlemleri ###########

import numpy as np
a = np.array([1,2,33,444,75])
a

seri = pd.Series(a)
print(seri)
seri[0:3]

########### Index Adı Atama ###########

seri = pd.Series([121,200,150,99],index=["REG","LOJ","CART","RF"])
print(seri)

#Index'e erişmek için:
    
seri.index

seri.keys

seri.values

list(seri.items())

seri.dtypes

########### Seri İçerisinde Eleman Sorgulama ###########

"REG" in seri

########### Fancy ile Eleman Seçme ###########

seri[["REG","RF"]]

########### Seri İçerisinde Eleman Değiştirm ###########

seri

seri[["REG","CART"]] = [134,186]

seri

seri["LOJ"] = 243

seri

########### Slicing ile Eleman Seçimi ###########

seri["LOJ":]

seri[::-1]

seri[::-2]

seri[::2]

seri["LOJ":"RF"]



########### PANDAS DATAFRAME ###########

# Numpy:Sabit tipli veri yapısı olduğundan; kategorik ve sürekli değişkenlerle aynı anda işlem yapma konusunda çok başarılı değil. Bu nedenle veri analizi ve manipulasyon gibi ileri seviye analitik işlemler için iyi cevap veremiyor.
# Matematiksel anlamda vektör/matris uzayında işlemler yapıldığı zaman pandas'ı da kullansak arka tarafta numpy'ı kullanıyor. 

# Pandas Dataframe yapısını da daha analitik yaklaşımlarda, makine öğrenmesinde ele alacağımız veri setlerini işlemek için kullanılır. 

import pandas as pd
liste = [1,2,39,67,90]
liste

df = pd.DataFrame(liste,columns=["sayi"],index = ["A","B","C","D","E"])
print(df)

# İki değişkenli dataframe:

import numpy as np
array = np.arange(3,21).reshape((6,3))
array

df_a = pd.DataFrame(array,columns=["degisken1","degisken2","degisken3"])
print(df_a)

# Önceden tanımlanan değişken /kolon ismini değiştirme:
    
    #1.yöntem

df_a.rename(columns ={'degisken1': 'var1', 'degisken2': 'var2','degisken3': 'var3'} , inplace = False)

    #2.yöntem
    
df_a.columns = ['var1','var2','var3']

df_a.columns = ['var1','var2','var3']

df_a

########### Dataframe Özellikleri ###########

type(df_a)

df_a.ndim

df_a.size

df_a.shape

df.columns

df_a.keys

df_a.values

df_a.info()

df.index

########### Betimsel İstatistikler ###########

df_a.describe()

#top 10 ya da bottom 3:

df_a.head(10)

df_a.tail(3)

########### Eleman İşlemleri ###########

import numpy as np

s1= np.random.randint(10,size=5)
s2= np.random.randint(10,size=5)
s3= np.random.randint(10,size=5)

print(s1)
print(s2)
print(s3)

# Sozluk üzerinden DataFrame:

sozluk = {"var1":s1,
          "var2":s2,
          "var3":s3
        }

sozluk

import pandas as pd
df = pd.DataFrame(sozluk)
print(df)


# Slicing:

df[0:1]

# Index değerlerini değiştirme:

df.index =["a","b","c","d","e"]

print(df)

df["c":"e"]

# Index'e göre satır silme:
# Dataframe üzerinde değişiklik yapmak istersek inplace=True yazılmalıdır
# axis=1  sütun, axis = 0 satır demek

df.drop("a",axis=0)

# Sütun/Değişken silme 

df.drop("var1",axis=1)
df

# Hem c hem de d'yi silmek istersek:

df.drop(["c","d"],axis=0)

########### Değişken Oluşturma ###########

df["var4"] = df["var1"]*df["var2"]
df


########### Gözlem ve Değişken Seçimi: Loc & iLoc ###########

import numpy as np
import pandas as pd

m=np.random.randint(1,30,size=(10,3))
df=pd.DataFrame(m,columns=["var1","var2","var3"])
df

# loc yapısı tanımlandığı şekli ile seçim yapmak üzere kullanılır:

df.loc[:3]

# iloc alışık olduğumuz indexleme mantığı ile (slicing) seçim yapar:

df.iloc[:3]

# df.iloc[satır,sütun]

df.iloc[0,0]

df.iloc[:3,:2]

df.iloc[4:,:2]

df.loc[0:3,"var3"]

df.iloc[0:4,2]

df.iloc[0:4]["var3"]


########### Koşullu Eleman işlemleri ###########

import numpy as np
import pandas as pd

m=np.random.randint(1,30,size=(10,3))
df=pd.DataFrame(m,columns=["var1","var2","var3"])
df

# var1 değişkenini seçelim:

df["var1"]

# var1>5 koşulunu sağlayanları getirelim:

df[df["var1"]>5]

# Birden fazla koşul tanımlamak istersek:

df[(df["var1"]>15) & (df["var2"]>10)]

########### Birleştirme (Join) İşlemleri ###########

import numpy as np
import pandas as pd

m = np.random.randint(1,30,size=(5,3))
df1 = pd.DataFrame(m,columns=["var1","var2","var3"])
df1

df2 = df1 + 99 
df2

# Birleştirme işlemi uygulayalım:
import pandas as pd
?pd.concat

# Satır birleştirmesi 

pd.concat([df1,df2],axis=0)

# Satır birleştirmesi sonrası indexleri düzenlemek için;
pd.concat([df1,df2],axis=0,ignore_index=True)

df1.columns

df2.columns = ["var1","var2","deg3"]

df1.columns

df2.columns

# Değişken isimleri farklı iken birleştirme 

pd.concat([df1,df2],axis=0,ignore_index=True)

#Yukarıdaki sorunu nasıl düzeltiriz? Sadece eşleşen değişkenleri birleştirelim:

pd.concat([df1,df2],join="inner")

conda install pandas-profiling

!pip install pandas-profiling

!pip3 install jupyter notebook

pd.concat([df1,df2],join_axes=[df1.columns])

import numpy as np
import pandas as pd
from pandas_profiling import ProfileReport

df1. profile_report()

# Sütun birleştirmesi : indexleri düzenlemek için;

pd.concat([df1,df2],axis=0,ignore_index=True)

########### İleri Birleştirme İşlemleri ###########

import pandas as pd
df1 = pd.DataFrame(
                    {"calisanlar":["Ali","Veli","Ayse","Fatma"],
                     "grup":["Muhasebe","Muhendislik","Muhendislik","İK"]
                    }
                  )


df2 = pd.DataFrame(
                    {"calisanlar":["Ayse","Ali","Veli","Fatma"],
                     "ilk_giris":[2010,2009,2014,2019]
                    }
                  )
print(df1)
print(df2)

# One-to-one birleştirme

df1.merge(df2,how="inner", on="calisanlar")
pd.merge(df1,df2,how="inner", on="calisanlar")

# Many-to-one birleştirme

import pandas as pd
df3 = df1.merge(df2,how="inner",on="calisanlar")
print(df3)

df4 =  pd.DataFrame(
                    {"grup":["Muhasebe","Muhendislik","İK"],
                     "mudur":["Caner","Mustafa","Berkcan"]
                    }
                  )

print(df4)

# 2.tablo tekilir tablo yani gruplar bazında tekilleştirilmiş :

df3.merge(df4,how = "inner",on="grup")

# Many-to-Many birleştirme

df5 =  pd.DataFrame(
                    {"grup":["Muhasebe","Muhasebe","Muhendislik","Muhendislik","İK","İK"],
                     "yetenekler":["matematik","excel","kodlama","linux","excel","yonetim"]
                    }
                  )
print(df5)

#df3 ile df5'i birleştirelim:

df3.merge(df5)

